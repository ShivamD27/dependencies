#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define N 3

struct Node{
    int cost,level,x,y;
    Node* parent;
    int mat[N][N];
    vector<int> state;
};


Node* newnode(int mat[N][N],int x,int y,int newX,int newY,int level, Node* parent){
    Node* node = new Node;
    node->parent=parent;
    memcpy(node->mat,mat,sizeof node->mat);
    swap(node->mat[x][y], node->mat[newX][newY]);
    node->cost=INT_MAX;
    node->level=level;
    node->x=newX;
    node->y=newY;
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            (node->state).push_back((node->mat)[i][j]);
        }
    }
    return node;


}

int calcost(int initial[N][N], int final[N][N]){
    int cost=0;
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            if(initial[i][j] && initial[i][j]!=final[i][j]){
                cost++;
            }
        }
    }
    return cost;

}

void printmatrix(int mat[N][N]){
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
}

// void printpath(Node* root){
//     if(root==NULL){
//         return;
//     }
//     printpath(root->parent);
//     printmatrix(root->mat);
//     cout<<endl;
// }

bool solvable(int st[3][3]){
    set<int>done;
    int invcnt=0;
    for (int i = 0; i < 3; ++i)
    {
        for (int j = 0; j < 3; ++j)
        {
            for(int k=1;k<st[i][j];k++){
                if(done.find(k)==done.end())invcnt++;
            }
            done.insert(st[i][j]);
        }
    }
    if(invcnt%2)return 0;
    return 1;
}


void printpath(Node* root)
{
    if (root == NULL)
        return;
    printpath(root->parent);
    printmatrix(root->mat);

    printf("\n");
}


int isSafe(int x,int y){
    return (x>=0 && y>=0 && x<N && y<N);
}

int row[]={1,0,-1,0};
int col[]={0,-1,0,1};

struct comp
{
    bool operator()(const Node* x, const Node* y)const{
        return ((x->cost + x->level) > (y->cost + y->level));
    }
};

void solve(int initial[N][N], int final[N][N],int x, int y){
    priority_queue<Node*,vector<Node*>, comp> pq;
    Node* root=newnode(initial,x,y,x,y,0,NULL);
    root->cost = calcost(initial,final);

    pq.push(root);
    set<vector<int>> vis;
    vis.insert(root->state);

    while(!pq.empty()){
        Node* min=pq.top();
        pq.pop();

        if(min->cost == 0){
            printpath(min);
            return;
        }

        for(int i=0;i<4;i++){
            if(isSafe(min->x + row[i], min->y + col[i])){
                Node* child=newnode(min->mat,min->x,min->y,min->x + row[i],min->y + col[i],min->level + 1, min);
                child->cost = calcost(child->mat,final);
                if(vis.find(child->state)==vis.end()){
                    vis.insert(child->state);
                    pq.push(child);
                }
            }        
        }
    }


}



int main(){
    int initial[N][N];
    int final[N][N];
    int x,y;


    cout<<"Enter first ";
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            cin>>initial[i][j];
            if(initial[i][j]==0){
                x=i;
                y=j;
            }
        }
    }
    cout<<"second matrix: ";
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            cin>>final[i][j];            
        }
    }

    cout<<"Answer: "<<endl;
    solve(initial,final,x,y);
    return 0;

}